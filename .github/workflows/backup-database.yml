name: Backup Database

on:
  # Ejecutar cada día a las 2am
  schedule:
    - cron: "0 2 * * *"

  # Permitir ejecución manual desde la interfaz de GitHub
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configurar variables de entorno
        run: |
          echo "ENVIRONMENT=ci" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> $GITHUB_ENV
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV

      - name: Crear backup
        id: backup
        run: |
          # Crear directorio de backups si no existe
          mkdir -p backups

          # Ejecutar script de backup
          python -m scripts.backup_database --create

          # Verificar si el backup se creó correctamente
          if [ ! -f backups/*.zip ]; then
            echo "Error: No se pudo crear el archivo de backup"
            exit 1
          fi

          # Obtener el nombre del archivo generado
          BACKUP_FILE=$(ls backups/*.zip | head -n 1)
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
          echo "backup_date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Subir backup como Release
        uses: softprops/action-gh-release@v2
        with:
          files: backups/*.zip
          name: "Backup DB ${{ github.run_number }} - ${{ steps.backup.outputs.backup_date }}"
          tag_name: "backup-${{ github.run_number }}"
          body: |
            Backup automático de la base de datos

            **Fecha de ejecución**: ${{ steps.backup.outputs.backup_date }}
            **Archivo**: ${{ steps.backup.outputs.backup_file }}

            Este backup fue generado automáticamente por el workflow de GitHub Actions.
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Subir backup como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups/*.zip
          retention-days: 30
          if-no-files-found: error

      - name: Limpiar backups antiguos
        run: |
          # Mantenemos solo los últimos 5 backups locales
          cd backups
          ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}
