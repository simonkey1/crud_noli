#!/usr/bin/env python
"""
Script para diagnosticar problemas de p√©rdida de datos
"""
import os
import sys
import logging
from datetime import datetime

# Agregar el directorio ra√≠z al path para importar desde los m√≥dulos
script_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(script_dir)
sys.path.append(root_dir)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_diagnostics():
    """Ejecuta diagn√≥sticos b√°sicos para detectar problemas de p√©rdida de datos"""
    print("üîç DIAGN√ìSTICO DE PROBLEMAS DE P√âRDIDA DE DATOS")
    print("=" * 60)
    
    # 1. Verificar el archivo main.py
    try:
        print("\nüîÑ Analizando script de inicio...")
        main_path = os.path.join(root_dir, 'main.py')
        if os.path.exists(main_path):
            print(f"‚úÖ Archivo main.py encontrado en: {main_path}")
            
            with open(main_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Buscar patrones de creaci√≥n/eliminaci√≥n de tablas
            drop_all = 'drop_all' in content.lower() or 'dropall' in content.lower()
            create_all = 'create_all' in content.lower() or 'createall' in content.lower()
            
            if drop_all:
                print("‚ö†Ô∏è ALERTA: Se detect√≥ c√≥digo que podr√≠a estar eliminando tablas (drop_all)")
            
            if create_all:
                print("‚ö†Ô∏è ALERTA: Se detect√≥ c√≥digo que podr√≠a estar recreando tablas (create_all)")
                
            # Buscar SQLModel.metadata.create_all
            if 'SQLModel.metadata.create_all' in content:
                print("‚ö†Ô∏è ALERTA: Se detect√≥ 'SQLModel.metadata.create_all' que crea tablas en el arranque")
            
            # Buscar l√≠neas sospechosas
            suspicious_lines = []
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if any(s in line.lower() for s in ['drop', 'delete', 'truncate', 'purge', 'clear']):
                    suspicious_lines.append((i+1, line.strip()))
            
            if suspicious_lines:
                print("‚ö†Ô∏è L√≠neas sospechosas encontradas:")
                for line_num, line in suspicious_lines:
                    print(f"   L√≠nea {line_num}: {line}")
            else:
                print("‚úÖ No se encontraron l√≠neas sospechosas en main.py")
        else:
            print(f"‚ùì No se encontr√≥ el archivo main.py en: {main_path}")
    except Exception as e:
        print(f"‚ùå Error al analizar script de inicio: {str(e)}")
    
    # 2. Verificar base de datos usando credenciales directamente
    try:
        print("\nüì° Intentando verificar configuraci√≥n de base de datos...")
        # Verificar archivo de configuraci√≥n
        config_path = os.path.join(root_dir, 'core', 'config.py')
        
        if os.path.exists(config_path):
            print(f"‚úÖ Archivo de configuraci√≥n encontrado: {config_path}")
            
            # Leer el archivo de configuraci√≥n
            with open(config_path, 'r', encoding='utf-8') as f:
                config_content = f.read()
            
            # Buscar indicios de Supabase
            is_supabase = 'supabase' in config_content.lower()
            if is_supabase:
                print("‚úÖ Se detect√≥ configuraci√≥n para Supabase")
                
                # Verificar si hay cambios en la configuraci√≥n de entorno
                env_vars = [
                    'DATABASE_URL', 'POSTGRES_USER', 'POSTGRES_PASSWORD',
                    'POSTGRES_SERVER', 'POSTGRES_PORT', 'POSTGRES_DB'
                ]
                
                print("\nüîç Verificando variables de entorno relevantes:")
                for var in env_vars:
                    if var in os.environ:
                        value = os.environ[var]
                        # Ocultar contrase√±as
                        if 'PASSWORD' in var:
                            value = '********'
                        # Truncar URL de base de datos
                        elif 'URL' in var and len(value) > 30:
                            value = value[:20] + '...' + value[-10:]
                        print(f"   - {var}: {value}")
                    else:
                        print(f"   - {var}: No definida")
            
            # Buscar si hay c√≥digo que reinicia la base de datos en producci√≥n
            if 'create_all' in config_content and 'production' in config_content:
                print("‚ö†Ô∏è ALERTA: Posible creaci√≥n de tablas en entorno de producci√≥n")
        else:
            print(f"‚ùì No se encontr√≥ el archivo de configuraci√≥n en: {config_path}")
    except Exception as e:
        print(f"‚ùå Error al verificar configuraci√≥n de base de datos: {str(e)}")
    
    # 3. Verificar configuraci√≥n de Render
    try:
        print("\nüñ•Ô∏è Verificando configuraci√≥n de despliegue...")
        
        # Verificar si estamos en Render
        render_service_id = os.environ.get("RENDER_SERVICE_ID")
        if render_service_id:
            print("‚úÖ Detectado entorno de Render")
            
            # Verificar configuraci√≥n conocida de Render
            render_path = os.path.join(root_dir, 'render.yaml')
            if os.path.exists(render_path):
                print(f"‚úÖ Archivo de configuraci√≥n render.yaml encontrado")
                
                with open(render_path, 'r', encoding='utf-8') as f:
                    render_content = f.read()
                
                # Verificar si hay disks (vol√∫menes persistentes)
                if 'disk:' in render_content:
                    print("‚úÖ Se detectaron configuraciones de discos persistentes")
                else:
                    print("‚ö†Ô∏è No se detectaron configuraciones de discos persistentes")
                    print("   Los datos almacenados fuera de la base de datos podr√≠an perderse")
                
                # Verificar si hay servicios de base de datos
                if 'type: pserv' in render_content or 'type: postgres' in render_content:
                    print("‚úÖ Se detect√≥ configuraci√≥n de base de datos en Render")
                else:
                    print("‚ÑπÔ∏è No se detect√≥ configuraci√≥n espec√≠fica de base de datos en Render")
                    print("   Posiblemente se use un servicio externo como Supabase")
        else:
            # Verificar Dockerfile
            dockerfile_path = os.path.join(root_dir, 'Dockerfile')
            if os.path.exists(dockerfile_path):
                print("‚úÖ Se detect√≥ Dockerfile para despliegue en contenedor")
                
                # Leer Dockerfile
                with open(dockerfile_path, 'r', encoding='utf-8') as f:
                    dockerfile_content = f.read()
                
                # Verificar si hay comandos que podr√≠an reiniciar la base de datos
                if 'alembic upgrade head' in dockerfile_content:
                    print("‚ÑπÔ∏è Se detect√≥ ejecuci√≥n de migraciones en el Dockerfile (alembic upgrade head)")
                
                if any(cmd in dockerfile_content for cmd in ['python -c', 'python scripts']):
                    print("‚ö†Ô∏è Se detectaron scripts Python que se ejecutan durante el despliegue")
                    print("   Revisa si alguno de estos scripts modifica la base de datos")
    except Exception as e:
        print(f"‚ùå Error al verificar configuraci√≥n de despliegue: {str(e)}")
    
    # 4. Recomendaciones generales
    print("\nüìã RECOMENDACIONES PARA EVITAR P√âRDIDA DE DATOS")
    print("=" * 60)
    print("""
1. Problemas comunes en servicios como Render o Supabase:
   - Si usas el plan gratuito de Render, los servicios web se apagan tras 15 minutos de inactividad
   - Al reiniciarse, si la base de datos est√° en el mismo contenedor, se perder√°n los datos
   - Supabase tiene pol√≠ticas RLS que podr√≠an estar bloqueando acceso a los datos

2. Soluciones recomendadas:
   - Aseg√∫rate de que tu base de datos sea un servicio externo persistente
   - Verifica que las credenciales de conexi√≥n no cambien entre reinicios
   - En main.py, modifica SQLModel.metadata.create_all para que sea condicional
     (s√≥lo crear tablas si no existen ya)
   - Configura respaldos autom√°ticos y verifica que funcionen

3. Para Supabase espec√≠ficamente:
   - Verifica que las pol√≠ticas RLS est√©n configuradas correctamente
   - Aseg√∫rate de que tu aplicaci√≥n se conecte con credenciales que tengan permisos
   - Usa el script fix_rls.py para corregir problemas de permisos
   
4. Para Render espec√≠ficamente:
   - Usa un servicio PostgreSQL dedicado en Render en vez del integrado
   - Configura vol√∫menes persistentes para almacenar archivos
   - Si necesitas ejecutar migraciones, usa comandos condicionales que no borren datos
    """)

    print("\n‚úÖ Diagn√≥stico b√°sico completado")
    print("=" * 60)

if __name__ == "__main__":
    run_diagnostics()
